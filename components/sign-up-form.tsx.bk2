import { Formik, Form, Field } from "formik";
import * as yup from "yup";
import "yup-phone";
import React, { useEffect, useState } from "react";
import { API, Auth } from "aws-amplify";

import * as mutations from "../src/graphql/mutations";
import { CreateStudentMutation } from "../src/API";
import { GraphQLResult } from "@aws-amplify/api-graphql";
export interface CreateStudentFormValues {
  cpr: string;
  email: string;
  phone: string;
  fullName: string;
}

export default function SignUp() {
  const [user, setUser] = useState<any>(null);

  useEffect(() => {
    const user = Auth.currentAuthenticatedUser()
      .then((user) => {
        setUser(user);
        console.log("currentAuthenticatedUser => user", user);
      })
      .catch((err) => {
        console.log("currentAuthenticatedUser => err", err);
        setUser(null);
      });

    return () => {};
  }, []);

  const initialValues: CreateStudentFormValues = {
    cpr: "",
    email: "",
    phone: "",
    fullName: "",
  };

  async function createDatabaseStudent(
    values: CreateStudentFormValues
  ): Promise<GraphQLResult<CreateStudentMutation> | null> {
    try {
      const res: GraphQLResult<CreateStudentMutation> = (await API.graphql({
        query: mutations.createStudent,

        variables: {
          input: {
            cpr: values.cpr,
            email: values.email,
            fullName: values.fullName,
            phone: values.phone,
          },
        },
      })) as GraphQLResult<CreateStudentMutation>;

      console.log("createDatabaseStudent => res", res?.data?.createStudent);
      return res;
    } catch (error) {
      console.log("createDatabaseStudent => error", error);
      return null;
    }
  }

  return (
    <div>
      <Formik
        initialValues={initialValues}
        validationSchema={yup.object({
          cpr: yup.string().min(9).required(),
          email: yup.string().email().required(),
          phone: yup.string().phone().required(),
          fullName: yup.string().required(),
        })}
        onSubmit={async (values, actions) => {
          console.log({ values, actions });

          const createdDatabaseUser = await createDatabaseStudent(values);

          actions.setSubmitting(false);
        }}
      >
        {({
          values,
          errors,
          touched,
          handleChange,
          handleBlur,
          isSubmitting,
          isValid,
        }) => (
          <Form className="container flex flex-col mx-auto">
            {/* CPR */}
            <label className="label">CPR</label>
            <Field
              type="cpr"
              name="cpr"
              title="cpr"
              placeholder="CPR"
              className={`input input-bordered input-primary ${
                errors.cpr && "input-error"
              }`}
              onChange={handleChange}
              onBlur={handleBlur}
              value={values.cpr}
            />
            <label className="label-text-alt text-error">
              {errors.cpr && touched.cpr && errors.cpr}
            </label>
            {/* Email */}
            <label className="label">Email</label>
            <Field
              type="email"
              name="email"
              title="email"
              placeholder="Email"
              className={`input input-bordered input-primary ${
                errors.email && "input-error"
              }`}
              onChange={handleChange}
              onBlur={handleBlur}
              value={values.email}
            />
            <label className="label-text-alt text-error">
              {errors.email && touched.email && errors.email}
            </label>
            {/* Phone */}
            <label className="label">Phone</label>
            <Field
              type="phone"
              name="phone"
              title="phone"
              placeholder="Phone"
              className={`input input-bordered input-primary ${
                errors.phone && "input-error"
              }`}
              onChange={handleChange}
              onBlur={handleBlur}
              value={values.phone}
            />
            <label className="label-text-alt text-error">
              {errors.phone && touched.phone && errors.phone}
            </label>
            {/* FullName */}
            <label className="label">Full name</label>
            <Field
              type="fullName"
              name="fullName"
              title="fullName"
              placeholder="Full name"
              className={`input input-bordered input-primary ${
                errors.fullName && "input-error"
              }`}
              onChange={handleChange}
              onBlur={handleBlur}
              value={values.fullName}
            />
            <label className="label-text-alt text-error">
              {errors.fullName && touched.fullName && errors.fullName}
            </label>

            <button
              className="my-3 text-white btn btn-primary"
              type="submit"
              disabled={isSubmitting || !isValid}
            >
              Sign Up
            </button>
          </Form>
        )}
      </Formik>
    </div>
  );
}
